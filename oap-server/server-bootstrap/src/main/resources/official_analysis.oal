/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

// All scope metrics
all_percentile = from(All.latency).percentile(10);  // Multiple values including p50, p75, p90, p95, p99
all_heatmap = from(All.latency).thermodynamic(100, 20);

// Service scope metrics
service_resp_time = from(Service.latency).longAvg();
service_sla = from(Service.*).percent(status == true);
service_cpm = from(Service.*).cpm();
service_percentile = from(Service.latency).percentile(10); // Multiple values including p50, p75, p90, p95, p99
service_apdex = from(Service.latency).apdex(name, status);

// Service relation scope metrics for topology
service_relation_client_cpm = from(ServiceRelation.*).filter(detectPoint == DetectPoint.CLIENT).cpm();
service_relation_server_cpm = from(ServiceRelation.*).filter(detectPoint == DetectPoint.SERVER).cpm();
service_relation_client_call_sla = from(ServiceRelation.*).filter(detectPoint == DetectPoint.CLIENT).percent(status == true);
service_relation_server_call_sla = from(ServiceRelation.*).filter(detectPoint == DetectPoint.SERVER).percent(status == true);
service_relation_client_resp_time = from(ServiceRelation.latency).filter(detectPoint == DetectPoint.CLIENT).longAvg();
service_relation_server_resp_time = from(ServiceRelation.latency).filter(detectPoint == DetectPoint.SERVER).longAvg();
service_relation_client_percentile = from(ServiceRelation.latency).filter(detectPoint == DetectPoint.CLIENT).percentile(10); // Multiple values including p50, p75, p90, p95, p99
service_relation_server_percentile = from(ServiceRelation.latency).filter(detectPoint == DetectPoint.SERVER).percentile(10); // Multiple values including p50, p75, p90, p95, p99


// Service Instance relation scope metrics for topology
service_instance_relation_client_cpm = from(ServiceInstanceRelation.*).filter(detectPoint == DetectPoint.CLIENT).cpm();
service_instance_relation_server_cpm = from(ServiceInstanceRelation.*).filter(detectPoint == DetectPoint.SERVER).cpm();
service_instance_relation_client_call_sla = from(ServiceInstanceRelation.*).filter(detectPoint == DetectPoint.CLIENT).percent(status == true);
service_instance_relation_server_call_sla = from(ServiceInstanceRelation.*).filter(detectPoint == DetectPoint.SERVER).percent(status == true);
service_instance_relation_client_resp_time = from(ServiceInstanceRelation.latency).filter(detectPoint == DetectPoint.CLIENT).longAvg();
service_instance_relation_server_resp_time = from(ServiceInstanceRelation.latency).filter(detectPoint == DetectPoint.SERVER).longAvg();
service_instance_relation_client_percentile = from(ServiceInstanceRelation.latency).filter(detectPoint == DetectPoint.CLIENT).percentile(10); // Multiple values including p50, p75, p90, p95, p99
service_instance_relation_server_percentile = from(ServiceInstanceRelation.latency).filter(detectPoint == DetectPoint.SERVER).percentile(10); // Multiple values including p50, p75, p90, p95, p99

// Service Instance Scope metrics
service_instance_sla = from(ServiceInstance.*).percent(status == true);
service_instance_resp_time= from(ServiceInstance.latency).longAvg();
service_instance_cpm = from(ServiceInstance.*).cpm();

// Endpoint scope metrics
endpoint_cpm = from(Endpoint.*).cpm();
endpoint_avg = from(Endpoint.latency).longAvg();
endpoint_sla = from(Endpoint.*).percent(status == true);
endpoint_percentile = from(Endpoint.latency).percentile(10); // Multiple values including p50, p75, p90, p95, p99

// Endpoint relation scope metrics
endpoint_relation_cpm = from(EndpointRelation.*).filter(detectPoint == DetectPoint.SERVER).cpm();
endpoint_relation_resp_time = from(EndpointRelation.rpcLatency).filter(detectPoint == DetectPoint.SERVER).longAvg();

// JVM instance metrics
instance_jvm_cpu = from(ServiceInstanceJVMCPU.usePercent).doubleAvg();
instance_jvm_memory_heap = from(ServiceInstanceJVMMemory.used).filter(heapStatus == true).longAvg();
instance_jvm_memory_noheap = from(ServiceInstanceJVMMemory.used).filter(heapStatus == false).longAvg();
instance_jvm_memory_heap_max = from(ServiceInstanceJVMMemory.max).filter(heapStatus == true).longAvg();
instance_jvm_memory_noheap_max = from(ServiceInstanceJVMMemory.max).filter(heapStatus == false).longAvg();
instance_jvm_young_gc_time = from(ServiceInstanceJVMGC.time).filter(phrase == GCPhrase.NEW).sum();
instance_jvm_old_gc_time = from(ServiceInstanceJVMGC.time).filter(phrase == GCPhrase.OLD).sum();
instance_jvm_young_gc_count = from(ServiceInstanceJVMGC.count).filter(phrase == GCPhrase.NEW).sum();
instance_jvm_old_gc_count = from(ServiceInstanceJVMGC.count).filter(phrase == GCPhrase.OLD).sum();

database_access_resp_time = from(DatabaseAccess.latency).longAvg();
database_access_sla = from(DatabaseAccess.*).percent(status == true);
database_access_cpm = from(DatabaseAccess.*).cpm();
database_access_percentile = from(DatabaseAccess.latency).percentile(10);

// CLR instance metrics
instance_clr_cpu = from(ServiceInstanceCLRCPU.usePercent).doubleAvg();
instance_clr_gen0_collect_count = from(ServiceInstanceCLRGC.gen0CollectCount).sum();
instance_clr_gen1_collect_count = from(ServiceInstanceCLRGC.gen1CollectCount).sum();
instance_clr_gen2_collect_count = from(ServiceInstanceCLRGC.gen2CollectCount).sum();
instance_clr_heap_memory = from(ServiceInstanceCLRGC.heapMemory).longAvg();
instance_clr_available_completion_port_threads = from(ServiceInstanceCLRThread.availableCompletionPortThreads).max();
instance_clr_available_worker_threads = from(ServiceInstanceCLRThread.availableWorkerThreads).max();
instance_clr_max_completion_port_threads = from(ServiceInstanceCLRThread.maxCompletionPortThreads).max();
instance_clr_max_worker_threads = from(ServiceInstanceCLRThread.maxWorkerThreads).max();

// Envoy instance metrics
envoy_heap_memory_max_used = from(EnvoyInstanceMetric.value).filter(metricName == "server.memory_heap_size").maxDouble();
envoy_total_connections_used = from(EnvoyInstanceMetric.value).filter(metricName == "server.total_connections").maxDouble();
envoy_parent_connections_used = from(EnvoyInstanceMetric.value).filter(metricName == "server.parent_connections").maxDouble();

// Disable unnecessary hard core sources
/////////
// disable(segment);
// disable(endpoint_relation_server_side);
// disable(top_n_database_statement);
// disable(zipkin_span);
// disable(jaeger_span);


// Browser metrics begin
// Browser service
browser_redirect_avg = from(BrowserPerfDetail.redirectTime).longAvg();
browser_dns_avg = from(BrowserPerfDetail.dnsTime).longAvg();
browser_req_avg = from(BrowserPerfDetail.reqTime).longAvg();
browser_dom_analysis_avg = from(BrowserPerfDetail.domAnalysisTime).longAvg();
browser_dom_ready_avg = from(BrowserPerfDetail.domReadyTime).longAvg();
browser_blank_avg = from(BrowserPerfDetail.blankTime).longAvg();

// Multiple values including p50, p75, p90, p95, p99
browser_redirect_percentile = from(BrowserPerfDetail.redirectTime).percentile(10);
browser_dns_percentile = from(BrowserPerfDetail.dnsTime).percentile(10);
browser_req_percentile = from(BrowserPerfDetail.reqTime).percentile(10);
browser_dom_analysis_percentile = from(BrowserPerfDetail.domAnalysisTime).percentile(10);
browser_dom_ready_percentile = from(BrowserPerfDetail.domReadyTime).percentile(10);
browser_blank_percentile = from(BrowserPerfDetail.blankTime).percentile(10);

// Browser service page
browser_page_pv = from(BrowserPagePathPerfDetail.count).sum();
browser_page_error_rate = from(BrowserPagePathPerfDetail.*).percent(status == false);

browser_page_redirect_avg = from(BrowserPagePathPerfDetail.redirectTime).longAvg();
browser_page_dns_avg = from(BrowserPagePathPerfDetail.dnsTime).longAvg();
browser_page_req_avg = from(BrowserPagePathPerfDetail.reqTime).longAvg();
browser_page_dom_analysis_avg = from(BrowserPagePathPerfDetail.domAnalysisTime).longAvg();
browser_page_dom_ready_avg = from(BrowserPagePathPerfDetail.domReadyTime).longAvg();
browser_page_blank_avg = from(BrowserPagePathPerfDetail.blankTime).longAvg();

// Multiple values including p50, p75, p90, p95, p99
browser_page_redirect_percentile = from(BrowserPagePathPerfDetail.redirectTime).percentile(10);
browser_page_dns_percentile = from(BrowserPagePathPerfDetail.dnsTime).percentile(10);
browser_page_req_percentile = from(BrowserPagePathPerfDetail.reqTime).percentile(10);
browser_page_dom_analysis_percentile = from(BrowserPagePathPerfDetail.domAnalysisTime).percentile(10);
browser_page_dom_ready_percentile = from(BrowserPagePathPerfDetail.domReadyTime).percentile(10);
browser_page_blank_percentile = from(BrowserPagePathPerfDetail.blankTime).percentile(10);

// Browser service version
browser_single_version_redirect_avg = from(BrowserSingleVersionPerfDetail.redirectTime).longAvg();
browser_single_version_dns_avg = from(BrowserSingleVersionPerfDetail.dnsTime).longAvg();
browser_single_version_req_avg = from(BrowserSingleVersionPerfDetail.reqTime).longAvg();
browser_single_version_dom_analysis_avg = from(BrowserSingleVersionPerfDetail.domAnalysisTime).longAvg();
browser_single_version_dom_ready_avg = from(BrowserSingleVersionPerfDetail.domReadyTime).longAvg();
browser_single_version_blank_avg = from(BrowserSingleVersionPerfDetail.blankTime).longAvg();

// Multiple values including p50, p75, p90, p95, p99
browser_single_version_redirect_percentile = from(BrowserSingleVersionPerfDetail.redirectTime).percentile(10);
browser_single_version_dns_percentile = from(BrowserSingleVersionPerfDetail.dnsTime).percentile(10);
browser_single_version_req_percentile = from(BrowserSingleVersionPerfDetail.reqTime).percentile(10);
browser_single_version_dom_analysis_percentile = from(BrowserSingleVersionPerfDetail.domAnalysisTime).percentile(10);
browser_single_version_dom_ready_percentile = from(BrowserSingleVersionPerfDetail.domReadyTime).percentile(10);
browser_single_version_blank_percentile = from(BrowserSingleVersionPerfDetail.blankTime).percentile(10);

// Browser service version page
browser_single_version_page_pv = from(BrowserSingleVersionPagePathPerfDetail.count).sum();
browser_single_version_page_error_rate = from(BrowserSingleVersionPagePathPerfDetail.*).percent(status == false);

browser_single_version_page_redirect_avg = from(BrowserSingleVersionPagePathPerfDetail.redirectTime).longAvg();
browser_single_version_page_dns_avg = from(BrowserSingleVersionPagePathPerfDetail.dnsTime).longAvg();
browser_single_version_page_req_avg = from(BrowserSingleVersionPagePathPerfDetail.reqTime).longAvg();
browser_single_version_page_dom_analysis_avg = from(BrowserSingleVersionPagePathPerfDetail.domAnalysisTime).longAvg();
browser_single_version_page_dom_ready_avg = from(BrowserSingleVersionPagePathPerfDetail.domReadyTime).longAvg();
browser_single_version_page_blank_avg = from(BrowserSingleVersionPagePathPerfDetail.blankTime).longAvg();

// Multiple values including p50, p75, p90, p95, p99
browser_single_version_page_redirect_percentile = from(BrowserSingleVersionPagePathPerfDetail.redirectTime).percentile(10);
browser_single_version_page_dns_percentile = from(BrowserSingleVersionPagePathPerfDetail.dnsTime).percentile(10);
browser_single_version_page_req_percentile = from(BrowserSingleVersionPagePathPerfDetail.reqTime).percentile(10);
browser_single_version_page_dom_analysis_percentile = from(BrowserSingleVersionPagePathPerfDetail.domAnalysisTime).percentile(10);
browser_single_version_page_dom_ready_percentile = from(BrowserSingleVersionPagePathPerfDetail.domReadyTime).percentile(10);
browser_single_version_page_blank_percentile = from(BrowserSingleVersionPagePathPerfDetail.blankTime).percentile(10);

// Browser metrics end